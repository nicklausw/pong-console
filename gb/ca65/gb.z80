;*
;* gb.z80 - Gameboy Hardware definitions for GALP
;*
;* by GABY. Inspired from work done by Carsten Sorensen & others.
;*
;* V1.0 - The original version
;*


; added by nicklausw
.define rBCPS $FF68
.define rOCPS $FF6A
.define rBCPD $FF69
.define rOCPD $FF6B

.define _HW $FF00

.define _VRAM $8000 ; $8000->$A000
;.define _VRAM_END $97FF
;.define _VRAM_LEN _VRAM_END - _VRAM + 1
.define _SCRN0 $9800 ; $9800->$9BFF
.define _SCRN1 $9C00 ; $9C00->$9FFF
.define _RAM $C000 ; $C000->$E000
.define _HRAM $F800 ; $F800->$FFFE
.define _OAMRAM $FE00 ; $FE00->$FE9F
.define _OAMRAM_END              $FE9F
.define _OAMRAM_LEN _OAMRAM_END - _OAMRAM + 1
.define _AUD3WAVERAM $FF30 ; $FF30->$FF3F

; --
; -- OAM flags
; --

.define OAMF_PRI %10000000 ; Priority
.define OAMF_YFLIP %01000000 ; Y flip
.define OAMF_XFLIP %00100000 ; X flip
.define OAMF_PAL0 %00000000 ; Palette number; 0,1
.define OAMF_PAL1 %00010000 ; Palette number; 0,1

;***************************************************************************
;*
;* Custom registers
;*
;***************************************************************************

; --
; -- P1 ($FF00)
; -- Register for reading joy pad info.    (R/W)
; --
.define rP1  $FF00

.define P1F_5     %00100000 ; P15 out port
.define P1F_4     %00010000 ; P14 out port
.define P1F_3     %00001000 ; P13 in port
.define P1F_2     %00000100 ; P12 in port
.define P1F_1     %00000010 ; P11 in port
.define P1F_0     %00000001 ; P10 in port


; --
; -- LCDC ($FF40)
; -- LCD Control (R/W)
; --
.define rLCDC  $FF40

.define LCDCF_OFF       %00000000 ; LCD Control Operation
.define LCDCF_ON        %10000000 ; LCD Control Operation
.define LCDCF_WIN9800   %00000000 ; Window Tile Map Display Select
.define LCDCF_WIN9C00   %01000000 ; Window Tile Map Display Select
.define LCDCF_WINOFF    %00000000 ; Window Display
.define LCDCF_WINON     %00100000 ; Window Display
.define LCDCF_BG8800    %00000000 ; BG & Window Tile Data Select
.define LCDCF_BG8000    %00010000 ; BG & Window Tile Data Select
.define LCDCF_BG9800    %00000000 ; BG Tile Map Display Select
.define LCDCF_BG9C00    %00001000 ; BG Tile Map Display Select
.define LCDCF_OBJ8      %00000000 ; OBJ Construction
.define LCDCF_OBJ16     %00000100 ; OBJ Construction
.define LCDCF_OBJOFF    %00000000 ; OBJ Display
.define LCDCF_OBJON     %00000010 ; OBJ Display
.define LCDCF_BGOFF     %00000000 ; BG Display
.define LCDCF_BGON      %00000001 ; BG Display
; "Window Character Data Select" follows BG


; --
; -- STAT ($FF41)
; -- LCDC Status   (R/W)
; --
.define rSTAT  $FF41

.define STATF_LYC       %01000000 ; LYCLY Coincidence (Selectable)
.define STATF_MODE10    %00100000 ; Mode 10
.define STATF_MODE01    %00010000 ; Mode 01 (V-Blank)
.define STATF_MODE00    %00001000 ; Mode 00 (H-Blank)
.define STATF_LYCF      %00000100 ; Coincidence Flag
.define STATF_HB        %00000000 ; H-Blank
.define STATF_VB        %00000001 ; V-Blank
.define STATF_OAM       %00000010 ; OAM-RAM is used by system
.define STATF_LCD       %00000011 ; Both OAM and VRAM used by system
.define STATF_BUSY      %00000010 ; When set, VRAM access is unsafe


; --
; -- SCY ($FF42)
; -- Scroll Y (R/W)
; --
.define rSCY   $FF42


; --
; -- SCY ($FF43)
; -- Scroll X (R/W)
; --
.define rSCX   $FF43


; --
; -- LY ($FF44)
; -- LCDC Y-Coordinate (R)
; --
; -- Values range from 0->153. 144->153 is the VBlank period.
; --
.define rLY  $FF44


; --
; -- LYC ($FF45)
; -- LY Compare (R/W)
; --
; -- When LYLYC, STATF_LYCF will be set in STAT
; --
.define rLYC   $FF45


; --
; -- DMA ($FF46)
; -- DMA Transfer and Start Address (W)
; --
.define rDMA   $FF46


; --
; -- BGP ($FF47)
; -- BG Palette Data (W)
; --
; -- Bit 7-6 - Intensity for %11
; -- Bit 5-4 - Intensity for %10
; -- Bit 3-2 - Intensity for %01
; -- Bit 1-0 - Intensity for %00
; --
.define rBGP   $FF47


; --
; -- OBP0 ($FF48)
; -- Object Palette 0 Data (W)
; --
; -- See BGP for info
; --
.define rOBP0  $FF48


; --
; -- OBP1 ($FF49)
; -- Object Palette 1 Data (W)
; --
; -- See BGP for info
; --
.define rOBP1  $FF49


; --
; -- SB ($FF01)
; -- Serial Transfer Data (R/W)
; --
.define rSB  $FF01

; --
; -- SC ($FF02)
; -- Serial I/O Control (R/W)
; --
.define rSC  $FF02

; --
; -- DIV ($FF04)
; -- Divider register (R/W)
; --
.define rDIV  $FF04


; --
; -- TIMA ($FF05)
; -- Timer counter (R/W)
; --
.define rTIMA  $FF05


; --
; -- TMA ($FF06)
; -- Timer modulo (R/W)
; --
.define rTMA  $FF06


; --
; -- TAC ($FF07)
; -- Timer control (R/W)
; --
.define rTAC  $FF07

.define TACF_START    %00000100
.define TACF_STOP     %00000000
.define TACF_4KHZ     %00000000
.define TACF_16KHZ    %00000011
.define TACF_65KHZ    %00000010
.define TACF_262KHZ   %00000001


; --
; -- IF ($FF0F)
; -- Interrupt Flag (R/W)
; --
; -- IE ($FFFF)
; -- Interrupt Enable (R/W)
; --
.define rIF  $FF0F
.define rIE  $FFFF

.define IEF_HILO      %00010000 ; Transition from High to Low of Pin number P10-P13
.define IEF_SERIAL    %00001000 ; Serial I/O transfer end
.define IEF_TIMER     %00000100 ; Timer Overflow
.define IEF_LCDC      %00000010 ; LCDC (see STAT)
.define IEF_VBLANK    %00000001 ; V-Blank


; --
; -- WY ($FF4A)
; -- Window Y Position (R/W)
; --
; -- 0 < WY < 143
; --
.define rWY  $FF4A


; --
; -- WX ($FF4B)
; -- Window X Position (R/W)
; --
; -- 7 < WX < 166
; --
.define rWX  $FF4B


;***************************************************************************
;*
;* Sound control registers
;*
;***************************************************************************

; --
; -- AUDVOL/NR50 ($FF24)
; -- Channel control / ON-OFF / Volume (R/W)
; --
; -- Bit 7   - Vin->SO2 ON/OFF (Vin??)
; -- Bit 6-4 - SO2 output level (volume) (# 0-7)
; -- Bit 3   - Vin->SO1 ON/OFF (Vin??)
; -- Bit 2-0 - SO1 output level (volume) (# 0-7)
; --
.define rNR50  $FF24
.define rAUDVOL	 rNR50


; --
; -- AUDTERM/NR51 ($FF25)
; -- Selection of Sound output terminal (R/W)
; --
; -- Bit 7   - Output sound 4 to SO2 terminal
; -- Bit 6   - Output sound 3 to SO2 terminal
; -- Bit 5   - Output sound 2 to SO2 terminal
; -- Bit 4   - Output sound 1 to SO2 terminal
; -- Bit 3   - Output sound 4 to SO1 terminal
; -- Bit 2   - Output sound 3 to SO1 terminal
; -- Bit 1   - Output sound 2 to SO1 terminal
; -- Bit 0   - Output sound 0 to SO1 terminal
; --
.define rNR51  $FF25
.define rAUDTERM	 rNR51


; --
; -- AUDENA/NR52 ($FF26)
; -- Sound on/off (R/W)
; --
; -- Bit 7   - All sound on/off (sets all audio regs to 0!)
; -- Bit 3   - Sound 4 ON flag (doesn't work!)
; -- Bit 2   - Sound 3 ON flag (doesn't work!)
; -- Bit 1   - Sound 2 ON flag (doesn't work!)
; -- Bit 0   - Sound 1 ON flag (doesn't work!)
; --
.define rNR52  $FF26
.define rAUDENA	 rNR52


;***************************************************************************
;*
;* SoundChannel #1 registers
;*
;***************************************************************************

; --
; -- AUD1SWEEP/NR10 ($FF10)
; -- Sweep register (R/W)
; --
; -- Bit 6-4 - Sweep Time
; -- Bit 3   - Sweep Increase/Decrease
; --           0: Addition    (frency increases???)
; --           1: Subtraction (frency increases???)
; -- Bit 2-0 - Number of sweep shift (# 0-7)
; -- Sweep Time: (n*7.8ms)
; --
.define rNR10  $FF10
.define rAUD1SWEEP	 rNR10


; --
; -- AUD1LEN/NR11 ($FF11)
; -- Sound length/Wave pattern duty (R/W)
; --
; -- Bit 7-6 - Wave Pattern Duty (00:12.5% 01:25% 10:50% 11:75%)
; -- Bit 5-0 - Sound length data (# 0-63)
; --
.define rNR11  $FF11
.define rAUD1LEN	 rNR11


; --
; -- AUD1ENV/NR12 ($FF12)
; -- Envelope (R/W)
; --
; -- Bit 7-4 - Initial value of envelope
; -- Bit 3   - Envelope UP/DOWN
; --           0: Decrease
; --           1: Range of increase
; -- Bit 2-0 - Number of envelope sweep (# 0-7)
; --
.define rNR12  $FF12
.define rAUD1ENV	 rNR12


; --
; -- AUD1LOW/NR13 ($FF13)
; -- Frency lo (W)
; --
.define rNR13  $FF13
.define rAUD1LOW	 rNR13


; --
; -- AUD1HIGH/NR14 ($FF14)
; -- Frency hi (W)
; --
; -- Bit 7   - Initial (when set, sound restarts)
; -- Bit 6   - Counter/consecutive selection
; -- Bit 2-0 - Frency's higher 3 bits
; --
.define rNR14  $FF14
.define rAUD1HIGH	 rNR14


;***************************************************************************
;*
;* SoundChannel #2 registers
;*
;***************************************************************************

; --
; -- AUD2LEN/NR21 ($FF16)
; -- Sound Length; Wave Pattern Duty (R/W)
; --
; -- see AUD1LEN for info
; --
.define rNR21  $FF16
.define rAUD2LEN	 rNR21


; --
; -- AUD2ENV/NR22 ($FF17)
; -- Envelope (R/W)
; --
; -- see AUD1ENV for info
; --
.define rNR22  $FF17
.define rAUD2ENV	 rNR22


; --
; -- AUD2LOW/NR23 ($FF18)
; -- Frency lo (W)
; --
.define rNR23  $FF18
.define rAUD2LOW	 rNR23


; --
; -- AUD2HIGH/NR24 ($FF19)
; -- Frency hi (W)
; --
; -- see AUD1HIGH for info
; --
.define rNR24  $FF19
.define rAUD2HIGH	 rNR24


;***************************************************************************
;*
;* SoundChannel #3 registers
;*
;***************************************************************************

; --
; -- AUD3ENA/NR30 ($FF1A)
; -- Sound on/off (R/W)
; --
; -- Bit 7   - Sound ON/OFF (1ON,0OFF)
; --
.define rNR30  $FF1A
.define rAUD3ENA	 rNR30


; --
; -- AUD3LEN/NR31 ($FF1B)
; -- Sound length (R/W)
; --
; -- Bit 7-0 - Sound length
; --
.define rNR31  $FF1B
.define rAUD3LEN	 rNR31


; --
; -- AUD3LEVEL/NR32 ($FF1C)
; -- Select output level
; --
; -- Bit 6-5 - Select output level
; --           00: 0/1 (mute)
; --           01: 1/1
; --           10: 1/2
; --           11: 1/4
; --
.define rNR32  $FF1C
.define rAUD3LEVEL	 rNR32


; --
; -- AUD3LOW/NR33 ($FF1D)
; -- Frency lo (W)
; --
; -- see AUD1LOW for info
; --
.define rNR33  $FF1D
.define rAUD3LOW	 rNR33


; --
; -- AUD3HIGH/NR34 ($FF1E)
; -- Frency hi (W)
; --
; -- see AUD1HIGH for info
; --
.define rNR34  $FF1E
.define rAUD3HIGH	 rNR34


; --
; -- AUD4LEN/NR41 ($FF20)
; -- Sound length (R/W)
; --
; -- Bit 5-0 - Sound length data (# 0-63)
; --
.define rNR41  $FF20
.define rAUD4LEN	 rNR41


; --
; -- AUD4ENV/NR42 ($FF21)
; -- Envelope (R/W)
; --
; -- see AUD1ENV for info
; --
.define rNR42  $FF21
.define rAUD4ENV	 rNR42


; --
; -- AUD4POLY/NR42 ($FF22)
; -- Polynomial counter (R/W)
; --
; -- Bit 7-4 - Selection of the shift clock frency of the (scf)
; --           polynomial counter (0000-1101)
; --           freqdrf*1/2^scf (not sure)
; -- Bit 3 -   Selection of the polynomial counter's step
; --           0: 15 steps
; --           1: 7 steps
; -- Bit 2-0 - Selection of the dividing ratio of frencies (drf)
; --           000: f/4   001: f/8   010: f/16  011: f/24
; --           100: f/32  101: f/40  110: f/48  111: f/56  (f4.194304 Mhz)
; --
.define rNR42_2  $FF22
.define rAUD4POLY	 rNR42_2


; --
; -- AUD4GO/NR43 ($FF23)
; -- (has wrong name and value (ff30) in Dr.Pan's doc!)
; --
; -- Bit 7 -   Inital
; -- Bit 6 -   Counter/consecutive selection
; --
.define rNR43  $FF23
.define rAUD4GO	 rNR43	; silly name!

;***************************************************************************
;*
;* Cart related
;*
;***************************************************************************

.define ROM_NOMBC          0
.define ROM_MBC1           1
.define ROM_MBC1_RAM       2
.define ROM_MBC1_RAM_BAT   3
.define ROM_MBC2           5
.define ROM_MBC2_BAT       6
.define ROM_NOMBC_RAM      8
.define ROM_NOMBC_RAM_BAT  9

.define ROM_SIZE_256KBIT   0
.define ROM_SIZE_512KBIT   1
.define ROM_SIZE_1M        2
.define ROM_SIZE_2M        3
.define ROM_SIZE_4M        4
.define ROM_SIZE_8M        5
.define ROM_SIZE_16M       6

.define ROM_SIZE_32KBYTE   0
.define ROM_SIZE_64KBYTE   1
.define ROM_SIZE_128KBYTE  2
.define ROM_SIZE_256KBYTE  3
.define ROM_SIZE_512KBYTE  4
.define ROM_SIZE_1MBYTE    5
.define ROM_SIZE_2MBYTE    6

.define RAM_SIZE_0KBIT    0
.define RAM_SIZE_16KBIT   1
.define RAM_SIZE_64KBIT   2
.define RAM_SIZE_256KBIT  3
.define RAM_SIZE_1MBIT    4

.define RAM_SIZE_0KBYTE    0
.define RAM_SIZE_2KBYTE    1
.define RAM_SIZE_8KBYTE    2
.define RAM_SIZE_32KBYTE   3
.define RAM_SIZE_128KBYTE  4

;***************************************************************************
;*
;* Keypad related
;*
;***************************************************************************

.define PADF_DOWN            $80
.define PADF_UP              $40
.define PADF_LEFT            $20
.define PADF_RIGHT           $10
.define PADF_START           $08
.define PADF_SELECT          $04
.define PADF_B               $02
.define PADF_A               $01

.define PADB_DOWN            $7
.define PADB_UP              $6
.define PADB_LEFT            $5
.define PADB_RIGHT           $4
.define PADB_START           $3
.define PADB_SELECT          $2
.define PADB_B               $1
.define PADB_A               $0

;***************************************************************************
;*
;* Screen related
;*
;***************************************************************************

.define SCRN_X       160 ; Width of screen in pixels
.define SCRN_Y       144 ; Height of screen in pixels
.define SCRN_X_B     20  ; Width of screen in bytes
.define SCRN_Y_B     18  ; Height of screen in bytes

.define SCRN_VX      256 ; Virtual width of screen in pixels
.define SCRN_VY      256 ; Virtual height of screen in pixels
.define SCRN_VX_B    32  ; Virtual width of screen in bytes
.define SCRN_VY_B    32  ; Virtual height of screen in bytes